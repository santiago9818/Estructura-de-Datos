# Estructura-de-Datos

import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

public class ListHandler {
    static Datos head = new Datos();
    static Datos head2 = new Datos();
	
	public static void main(String args[])
	{
		ArrayList <String> playerlist = new ArrayList<String>();
		
		Datos add1 = new Datos("Juan" , 20 , "Colpatria", "Tennis");
		Datos add2 = new Datos("Manolo" , 31 , "Fedex", "Football");
		Datos add3 = new Datos("Garcia" , 25 , "Antonel", "IndyCar");
		Datos add4 = new Datos("Felipe" , 40 , "Servientrega", "Tennis");
		Datos add5 = new Datos("Anastacia" , 35 , "Macuin", "Drift");
		
		add1.next = add2;
		add2.next = add3;
		add3.next = add4;
		add4.next = add5;
		
		head.next = add1;
		
		printList();
		
		addNodeArBegining( new Datos("Ibarguen", 28 , "Colombia" , "Salto Triple"));  //imprime al inicio
		
		printList();
		
		addNodeEnd( new Datos("holinda", 45 , "Vietnam" , "Natacion"));     // imprime al final
		
		printList();
                
                addAtIndex(new Datos("holinda", 45 , "Vietnam" , "Natacion"),2);
                
                printList();
		
		
		
	}
	
	public static void printList()
	{
		Datos temp = head.next;
		BufferedWriter bw = new BufferedWriter( new OutputStreamWriter( System.out ));
		
		try
		{
				while(temp != null)
				{
				bw.write( temp.toString());
				temp = temp.next;
			}
				
			bw.write("\n\n\n");
			bw.flush();
				
		}
		catch(Exception ex){}
	}
	
	public static void addNodeArBegining(Datos node)
	{
		node.next = head.next;
		head.next = node;
	}
	
	public static void addNodeEnd(Datos node)
	{
		Datos temp = head.next;
		while(temp.next != null)
			temp = temp.next;
		
		temp.next = node;
	}
        
        //clase de hoy
        public static int getSize() // insertar al final
        {
            int counter = 0;
            Datos temp = head.next;
            while(temp!= null)
            {
                counter +=1;
                temp=temp.next;
            }
            return counter;
        }
        
        public static void addAtIndex(Datos nodo, int i)
        {
            Datos temp = head;
            int tamaño = getSize();
            if(i>tamaño)
            {
                System.out.println("Error");
            }
            else
            {
                for(int j=0;j<i;j++)
                {
                    temp = temp.next;
                }
                nodo.next = temp.next;
                temp.next = nodo;
            }
            
        }
        
        //eliminar nodo al inicio
       
        public static void deleteNodeAtBegining()
	{
		head.next = head.next.next;
	}
        
        // eliminar nodo al final
        
        public static void deleteNodeAtEnd()
	{
		Datos temp = (head);
                while(temp.next.next != null)
                {
                    temp = temp.next;
                }
                temp.next = null;
	}
        
        
        //eliminar en cualquier posicion
        
        public void deleteAtIndex(int i,Datos nodo)
        {
             Datos temp = head;
             int tamaño = getSize();
            if(i>tamaño)
            {
                System.out.println("Error");
            }
            else
            {
                for(int j=0;j<i;j++)
                {
                    temp = temp.next;
                }
                temp.next = temp.next.next;
            }
        }
        
        //actualizar y buscar
        
        public Datos searchIndex (int i)
        {
           Datos temp = head.next;
           for(int j= 0; j<i; j++)
           {
               temp = temp.next;
           }
           return temp;
        }
        
        public Datos searchSports ( String deporte)
        {
            Datos temp = head.next;
            
            while(temp != null)
            {
                if(temp.getDeporte().equals(deporte))
                {
                    head2.addNodeEnd(temp);
                }
            }
            
            return head2;
    }
        public static void actualizarDatos (int index, Datos node)
        {
            Datos temp = head;
            int tamaño = getSize();
            if(index > tamaño)
            {
                System.out.println("ERROR");
            }
            else
            {
                for(int j = 0; j < index ; j++ )
                {
                    temp = temp.next;
                }
                node.next = temp.next.next;
                temp.next = node;
            }
        
        }
}




public class Datos {
        private String nombre;
	private int edad;
	private String equipo;
	private String deporte;
	public Datos next = null;
	
	public Datos(){}
	
	public Datos(String nombre, int edad, String equipo, String deporte)
	{
		this.nombre = nombre;
		this.edad = edad;
		this.equipo = equipo;
		this.deporte = deporte;
		
	}

	/**
	 * @return the nombre
	 */
	public String getNombre() {
		return nombre;
	}

	/**
	 * @param nombre the nombre to set
	 */
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	/**
	 * @return the edad
	 */
	public int getEdad() {
		return edad;
	}

	/**
	 * @param edad the edad to set
	 */
	public void setEdad(int edad) {
		this.edad = edad;
	}

	/**
	 * @return the equipo
	 */
	public String getEquipo() {
		return equipo;
	}

	/**
	 * @param equipo the equipo to set
	 */
	public void setEquipo(String equipo) {
		this.equipo = equipo;
	}

	/**
	 * @return the deporte
	 */
	public String getDeporte() {
		return deporte;
	}

	/**
	 * @param deporte the deporte to set
	 */
	public void setDeporte(String deporte) {
		this.deporte = deporte;
	}
	
	public String toString()
	{
		return "El jugador "+ this.nombre + " tiene " + this.edad + " años, y pertenece al equipo "
				+ this.equipo + " en donde practica " + this.deporte + "\n";
	}

    void addNodeEnd(Datos temp) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
	
}





